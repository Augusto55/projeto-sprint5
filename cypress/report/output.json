{
  "stats": {
    "suites": 8,
    "tests": 39,
    "passes": 39,
    "pending": 0,
    "failures": 0,
    "start": "2021-11-10T20:44:43.975Z",
    "end": "2021-11-10T20:47:14.818Z",
    "duration": 100061,
    "testsRegistered": 39,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "c3c8a635-00a0-43cb-b879-d6adca356043",
      "title": "",
      "fullFile": "cypress/integration/back.carrinho.spec.js",
      "file": "cypress/integration/back.carrinho.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "b0d72c68-3572-4206-a3ff-5003f82f56ec",
          "title": "Testes de API ServeRest - CARRINHO",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Deve utilizar GET para listar os todos os carrinhos disponiveis",
              "fullTitle": "Testes de API ServeRest - CARRINHO Deve utilizar GET para listar os todos os carrinhos disponiveis",
              "timedOut": null,
              "duration": 188,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.buscarCarrinho().then(res => {\n  expect(res.statusCode === 200);\n  expect(res.body).to.have.all.keys(\"quantidade\", \"carrinhos\");\n  expect(res.body.carrinhos[0]).to.have.property(\"produtos\");\n  expect(res.body.carrinhos[0]).to.have.property(\"precoTotal\");\n  expect(res.body.carrinhos[0]).to.have.property(\"quantidadeTotal\");\n  expect(res.body.carrinhos[0]).to.have.property(\"idUsuario\");\n  expect(res.body.carrinhos[0]).to.have.property(\"_id\");\n  expect(res.body.carrinhos[0].produtos).to.be.a(\"array\");\n  expect(res.body.carrinhos[0].precoTotal).to.be.a(\"number\");\n  expect(res.body.carrinhos[0].quantidadeTotal).to.be.a(\"number\");\n  expect(res.body.carrinhos[0]._id).to.be.a(\"string\");\n});",
              "err": {},
              "uuid": "49e0707a-27d7-4d34-bb6b-2115951434ed",
              "parentUUID": "b0d72c68-3572-4206-a3ff-5003f82f56ec",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "49e0707a-27d7-4d34-bb6b-2115951434ed"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 188,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "b24145fd-7084-442b-bd90-e5fd5bb3e974",
      "title": "",
      "fullFile": "cypress/integration/back.login.spec.js",
      "file": "cypress/integration/back.login.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "6c4efe69-bc06-4657-a2d8-d816d5bf3c65",
          "title": "Testes de API ServeRest - LOGIN",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Tentar login com um ADM \nTentar login com usuario",
              "fullTitle": "Testes de API ServeRest - LOGIN Tentar login com um ADM \nTentar login com usuario",
              "timedOut": null,
              "duration": 201,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.fixture(\"loginCredentials\").then(usuario => {\n  cy.logar(usuario.valido).then(res => {\n    expect(res.statusCode === 200);\n    expect(res.body).to.have.all.keys(\"message\", \"authorization\");\n    bearer = res.body.authorization;\n    cy.validarContrato(res, \"post_login\", 200).then(validacao => {\n      //res = resposta | pasta | arquivo .json\n      expect(validacao).to.be.equal(\"Contrato valido.\");\n    });\n  });\n});",
              "err": {},
              "uuid": "c38d9046-ba95-4f05-b22d-fccfbbf41830",
              "parentUUID": "6c4efe69-bc06-4657-a2d8-d816d5bf3c65",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve tentar login com email anormal com erro",
              "fullTitle": "Testes de API ServeRest - LOGIN Deve tentar login com email anormal com erro",
              "timedOut": null,
              "duration": 43,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.fixture(\"loginCredentials\").then(usuario => {\n  cy.logar(usuario.emailLOCO).then(res => {\n    expect(res.statusCode === 400);\n    expect(res.body).to.have.property(\"email\");\n    expect(res.body.email).to.equal(\"email deve ser um email válido\");\n    cy.validarContrato(res, \"post_login/email\", 400).then(validacao => {\n      expect(validacao).to.be.equal(\"Contrato valido.\");\n    });\n  });\n});",
              "err": {},
              "uuid": "9de19f45-66e7-46a6-90b7-15d423b5404d",
              "parentUUID": "6c4efe69-bc06-4657-a2d8-d816d5bf3c65",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve tentar login com caixa de email vazia",
              "fullTitle": "Testes de API ServeRest - LOGIN Deve tentar login com caixa de email vazia",
              "timedOut": null,
              "duration": 33,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.fixture(\"loginCredentials\").then(usuario => {\n  cy.logar(usuario.emailNPreenchido).then(res => {\n    expect(res.statusCode === 400);\n    expect(res.body).to.have.property(\"email\");\n    expect(res.body.email).to.equal(\"email não pode ficar em branco\");\n    cy.validarContrato(res, \"post_login/email\", 400).then(validacao => {\n      expect(validacao).to.be.equal(\"Contrato valido.\");\n    });\n  });\n});",
              "err": {},
              "uuid": "3c279984-5447-4b49-8b93-a88db5f51d4a",
              "parentUUID": "6c4efe69-bc06-4657-a2d8-d816d5bf3c65",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve tentar login com caixa de senha vazia",
              "fullTitle": "Testes de API ServeRest - LOGIN Deve tentar login com caixa de senha vazia",
              "timedOut": null,
              "duration": 29,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.fixture(\"loginCredentials\").then(usuario => {\n  cy.logar(usuario.senhaNPreenchida).then(res => {\n    expect(res.statusCode === 400);\n    expect(res.body).to.have.property(\"password\");\n    expect(res.body.password).to.equal(\"password não pode ficar em branco\");\n    cy.validarContrato(res, \"post_login/password\", 400).then(validacao => {\n      expect(validacao).to.be.equal(\"Contrato valido.\");\n    });\n  });\n});",
              "err": {},
              "uuid": "24479665-86f2-443f-97af-bfa2a4433bde",
              "parentUUID": "6c4efe69-bc06-4657-a2d8-d816d5bf3c65",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve tentar login com erro - SEM EMAIL",
              "fullTitle": "Testes de API ServeRest - LOGIN Deve tentar login com erro - SEM EMAIL",
              "timedOut": null,
              "duration": 24,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.fixture(\"loginCredentials\").then(usuario => {\n  cy.logar(usuario.emailVAZIO).then(res => {\n    expect(res.statusCode === 400);\n    expect(res.body).to.have.property(\"email\");\n    expect(res.body.email).to.equal(\"email é obrigatório\");\n    cy.validarContrato(res, \"post_login/email\", 400).then(validacao => {\n      expect(validacao).to.be.equal(\"Contrato valido.\");\n    });\n  });\n});",
              "err": {},
              "uuid": "a98cdadb-a14e-4400-8645-d52511208342",
              "parentUUID": "6c4efe69-bc06-4657-a2d8-d816d5bf3c65",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve tentar login com erro - SEM SENHA",
              "fullTitle": "Testes de API ServeRest - LOGIN Deve tentar login com erro - SEM SENHA",
              "timedOut": null,
              "duration": 23,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.fixture(\"loginCredentials\").then(usuario => {\n  cy.logar(usuario.senhaVAZIA).then(res => {\n    expect(res.statusCode === 400);\n    expect(res.body).to.have.property(\"password\");\n    expect(res.body.password).to.equal(\"password é obrigatório\");\n    cy.validarContrato(res, \"post_login/password\", 400).then(validacao => {\n      expect(validacao).to.be.equal(\"Contrato valido.\");\n    });\n  });\n});",
              "err": {},
              "uuid": "6f474c21-3629-4aac-922a-b9c921a16bef",
              "parentUUID": "6c4efe69-bc06-4657-a2d8-d816d5bf3c65",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c38d9046-ba95-4f05-b22d-fccfbbf41830",
            "9de19f45-66e7-46a6-90b7-15d423b5404d",
            "3c279984-5447-4b49-8b93-a88db5f51d4a",
            "24479665-86f2-443f-97af-bfa2a4433bde",
            "a98cdadb-a14e-4400-8645-d52511208342",
            "6f474c21-3629-4aac-922a-b9c921a16bef"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 353,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "75f08574-636f-420e-b712-6f14df64fbd1",
      "title": "",
      "fullFile": "cypress/integration/back.produtos.spec.js",
      "file": "cypress/integration/back.produtos.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "3045f05f-618d-4a7a-95dc-af3d829ad052",
          "title": "Testes de API ServeRest - PRODUTOS",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Requesição GET na rota dos produtos \n(Lista todos produtos disponiveis)",
              "fullTitle": "Testes de API ServeRest - PRODUTOS Requesição GET na rota dos produtos \n(Lista todos produtos disponiveis)",
              "timedOut": null,
              "duration": 147,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.buscarProdutos().then(res => {\n  expect(res.statusCode === 200);\n  cy.validarContrato(res, \"get_produtos\", 200).then(validacao => {\n    expect(validacao).to.be.equal(\"Contrato valido.\");\n  });\n});",
              "err": {},
              "uuid": "129b0d0b-ce22-405b-b21d-88790db626e8",
              "parentUUID": "3045f05f-618d-4a7a-95dc-af3d829ad052",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Criação de um produto no sistema utilizando POST",
              "fullTitle": "Testes de API ServeRest - PRODUTOS Criação de um produto no sistema utilizando POST",
              "timedOut": null,
              "duration": 63,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let produto = _factory.default.geradorDeProdutos();\ncy.fixture(\"loginCredentials\").then(usuario => {\n  cy.logar(usuario.valido).then(res => {\n    bearer = res.body.authorization;\n    cy.criarProduto(bearer, produto).then(res => {\n      expect(res.statusCode === 201);\n      expect(res.body).to.have.all.keys(\"message\", \"_id\");\n      expect(res.body.message).to.equal(\"Cadastro realizado com sucesso\");\n      cy.validarContrato(res, \"post_produtos\", 201).then(validacao => {\n        expect(validacao).to.be.equal(\"Contrato valido.\");\n      });\n    });\n  });\n});",
              "err": {},
              "uuid": "e8313a91-9f90-4595-9022-89829be0c94c",
              "parentUUID": "3045f05f-618d-4a7a-95dc-af3d829ad052",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Teste de inserção de um produto já existente",
              "fullTitle": "Testes de API ServeRest - PRODUTOS Teste de inserção de um produto já existente",
              "timedOut": null,
              "duration": 47,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.fixture(\"loginCredentials\").then(usuario => {\n  cy.logar(usuario.valido).then(res => {\n    bearer = res.body.authorization;\n    cy.fixture(\"existingProd\").then(produto => {\n      cy.criarProduto(bearer, produto.produtoExistente).then(res => {\n        expect(res.statusCode === 400);\n        expect(res.body).to.have.property(\"message\");\n        cy.validarContrato(res, \"post_produtos\", 400).then(validacao => {\n          expect(validacao).to.be.equal(\"Contrato valido.\");\n        });\n      });\n    });\n  });\n});",
              "err": {},
              "uuid": "84c4a21a-6ae0-4eca-b956-bf32834c5dd5",
              "parentUUID": "3045f05f-618d-4a7a-95dc-af3d829ad052",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Teste de inserção de Token invalido/inesistente/expirado",
              "fullTitle": "Testes de API ServeRest - PRODUTOS Teste de inserção de Token invalido/inesistente/expirado",
              "timedOut": null,
              "duration": 40,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let produto = _factory.default.geradorDeProdutos();\ncy.fixture(\"loginCredentials\").then(usuario => {\n  cy.logar(usuario.emailLOCO).then(res => {\n    bearer = res.body.authorization;\n    cy.criarProduto(bearer, produto).then(res => {\n      expect(res.statusCode === 401);\n      expect(res.body).to.have.property(\"message\");\n      expect(res.body.message).to.be.equal(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");\n      cy.validarContrato(res, \"post_produtos\", 401).then(validacao => {\n        expect(validacao).to.be.equal(\"Contrato valido.\");\n      });\n    });\n  });\n});",
              "err": {},
              "uuid": "8f8baec8-53b9-4913-b4f0-840e5576489d",
              "parentUUID": "3045f05f-618d-4a7a-95dc-af3d829ad052",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Fazer uma requesição de um produto expecifico",
              "fullTitle": "Testes de API ServeRest - PRODUTOS Fazer uma requesição de um produto expecifico",
              "timedOut": null,
              "duration": 31,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.fixture(\"existingProd\").then(produto => {\n  cy.buscarProdutoExistente(produto.product_ID_Existente._id).then(res => {\n    expect(res.statusCode === 200);\n    expect(res.body).to.have.all.keys(\"nome\", \"preco\", \"descricao\", \"quantidade\", \"_id\");\n    cy.validarContrato(res, \"get_produtos/_id\", 200).then(validacao => {\n      expect(validacao).to.be.equal(\"Contrato valido.\");\n    });\n  });\n});",
              "err": {},
              "uuid": "580f2942-83da-4861-bcee-c3f13e70e77a",
              "parentUUID": "3045f05f-618d-4a7a-95dc-af3d829ad052",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deletar um produto temporario",
              "fullTitle": "Testes de API ServeRest - PRODUTOS Deletar um produto temporario",
              "timedOut": null,
              "duration": 48,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let produto = _factory.default.geradorDeProdutos();\nvar id;\ncy.fixture(\"loginCredentials\").then(usuario => {\n  cy.logar(usuario.valido).then(login => {\n    bearer = login.body.authorization;\n    cy.criarProduto(bearer, produto).then(prod => {\n      id = prod.body._id;\n      cy.deletarProduto(bearer, id).then(res => {\n        expect(res.statusCode === 200);\n        expect(res.body).to.have.property(\"message\");\n        expect(res.body.message).to.be.equal(\"Registro excluído com sucesso\"); //cy.validarContrato(res, \"delete_produtos\", 200).then( validacao => {\n        //    expect(validacao).to.be.equal(\"Contrato valido.\")\n        //})\n      });\n    });\n  });\n});",
              "err": {},
              "uuid": "b76ea2c1-d3f8-4ccc-ab9f-b8590bf425d4",
              "parentUUID": "3045f05f-618d-4a7a-95dc-af3d829ad052",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "129b0d0b-ce22-405b-b21d-88790db626e8",
            "e8313a91-9f90-4595-9022-89829be0c94c",
            "84c4a21a-6ae0-4eca-b956-bf32834c5dd5",
            "8f8baec8-53b9-4913-b4f0-840e5576489d",
            "580f2942-83da-4861-bcee-c3f13e70e77a",
            "b76ea2c1-d3f8-4ccc-ab9f-b8590bf425d4"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 376,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "f23074ca-2439-4af7-b860-227539ac1ff8",
      "title": "",
      "fullFile": "cypress/integration/back.usuarios.spec.js",
      "file": "cypress/integration/back.usuarios.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "7c8bb511-2107-44f3-b8f8-6d38ec80810c",
          "title": "Testes de API ServeRest - USUARIOS",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Deve validar a resposta de GET usuarios",
              "fullTitle": "Testes de API ServeRest - USUARIOS Deve validar a resposta de GET usuarios",
              "timedOut": null,
              "duration": 37,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.listarUSERS().then(res => {\n  expect(res.statusCode === 200);\n});",
              "err": {},
              "uuid": "472a7b9a-7ccf-4b4c-8da6-010de7d7a682",
              "parentUUID": "7c8bb511-2107-44f3-b8f8-6d38ec80810c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve pegar um id com a resposta de GET usuarios",
              "fullTitle": "Testes de API ServeRest - USUARIOS Deve pegar um id com a resposta de GET usuarios",
              "timedOut": null,
              "duration": 28,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.fixture(\"loginCredentials\").then(usuario => {\n  cy.pegarUserExpecifico(usuario.valido).then(res => {\n    expect(res.statusCode === 200);\n    expect(res.body.usuarios).to.be.a(\"array\");\n    expect(res.body.usuarios[0]._id).to.be.a(\"string\");\n  });\n});",
              "err": {},
              "uuid": "a3ec3477-8cda-49b4-976f-0877f88d1ca7",
              "parentUUID": "7c8bb511-2107-44f3-b8f8-6d38ec80810c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Validar testes de contrato da resposta de GET usuarios",
              "fullTitle": "Testes de API ServeRest - USUARIOS Validar testes de contrato da resposta de GET usuarios",
              "timedOut": null,
              "duration": 61,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.listarUSERS().then(res => {\n  expect(res.statusCode === 200);\n  cy.validarContrato(res, \"get_usuarios\", 200).then(validacao => {\n    expect(validacao).to.be.equal(\"Contrato valido.\");\n  });\n});",
              "err": {},
              "uuid": "eb5a54d8-1471-468a-bacf-a64494fbeb53",
              "parentUUID": "7c8bb511-2107-44f3-b8f8-6d38ec80810c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "472a7b9a-7ccf-4b4c-8da6-010de7d7a682",
            "a3ec3477-8cda-49b4-976f-0877f88d1ca7",
            "eb5a54d8-1471-468a-bacf-a64494fbeb53"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 126,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "5f7d606d-ba1d-4b07-88ba-37ac33c460c8",
      "title": "",
      "fullFile": "cypress/integration/front_cdProd.spec.js",
      "file": "cypress/integration/front_cdProd.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "3fc8296b-f7ac-4f78-991c-6ef97d6027a7",
          "title": "Testes Front ServeRest - CADASTRO DE PRODUTOS",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Deve realizar cadastro corretamente",
              "fullTitle": "Testes Front ServeRest - CADASTRO DE PRODUTOS Deve realizar cadastro corretamente",
              "timedOut": null,
              "duration": 12130,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_serverest_prod.default.cadastrar();",
              "err": {},
              "uuid": "5a58fa05-f286-4bab-9486-88a3d1e27708",
              "parentUUID": "3fc8296b-f7ac-4f78-991c-6ef97d6027a7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve realizar cadastro com campos vazios",
              "fullTitle": "Testes Front ServeRest - CADASTRO DE PRODUTOS Deve realizar cadastro com campos vazios",
              "timedOut": null,
              "duration": 2938,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_serverest_prod.default.verificarErros();",
              "err": {},
              "uuid": "5ffb3192-19f7-4411-b79b-ee726d815576",
              "parentUUID": "3fc8296b-f7ac-4f78-991c-6ef97d6027a7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve excluir um produtos",
              "fullTitle": "Testes Front ServeRest - CADASTRO DE PRODUTOS Deve excluir um produtos",
              "timedOut": null,
              "duration": 3730,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_serverest_prod.default.excluirProdutos();",
              "err": {},
              "uuid": "8f718f6f-d694-42a8-85a6-93e46ea89323",
              "parentUUID": "3fc8296b-f7ac-4f78-991c-6ef97d6027a7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve editar um produto(não está funcionando)",
              "fullTitle": "Testes Front ServeRest - CADASTRO DE PRODUTOS Deve editar um produto(não está funcionando)",
              "timedOut": null,
              "duration": 4685,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_serverest_prod.default.editarProdutos();",
              "err": {},
              "uuid": "fd3ad164-32ad-4a6f-be4f-db882b2cfa26",
              "parentUUID": "3fc8296b-f7ac-4f78-991c-6ef97d6027a7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5a58fa05-f286-4bab-9486-88a3d1e27708",
            "5ffb3192-19f7-4411-b79b-ee726d815576",
            "8f718f6f-d694-42a8-85a6-93e46ea89323",
            "fd3ad164-32ad-4a6f-be4f-db882b2cfa26"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 23483,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "8e8fd638-ddc5-4b8f-9580-032878d3b57d",
      "title": "",
      "fullFile": "cypress/integration/front_cdusuario.spec.js",
      "file": "cypress/integration/front_cdusuario.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "85ec4450-e8d5-45d0-9374-928027ec76d6",
          "title": "Testes Front ServeRest - CADASTRO DE USUARIOS",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "e64f630b-96d7-4934-a0e3-140710f28612",
              "title": "Testes cadastro de usuário/Positivos",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Validar campos para realizar o cadastro",
                  "fullTitle": "Testes Front ServeRest - CADASTRO DE USUARIOS Testes cadastro de usuário/Positivos Validar campos para realizar o cadastro",
                  "timedOut": null,
                  "duration": 2236,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "_serverest_cdusuario.default.campos_cadastro();",
                  "err": {},
                  "uuid": "f31722e7-a8e0-4346-aca4-5491558acd1d",
                  "parentUUID": "e64f630b-96d7-4934-a0e3-140710f28612",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [
                {
                  "uuid": "d25a6408-7d9b-440d-94a0-17462be46615",
                  "title": "Cadastro de usuário com propriedades de administrador",
                  "fullFile": "",
                  "file": "",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Deve cadastrar um usuário admin",
                      "fullTitle": "Testes Front ServeRest - CADASTRO DE USUARIOS Testes cadastro de usuário/Positivos Cadastro de usuário com propriedades de administrador Deve cadastrar um usuário admin",
                      "timedOut": null,
                      "duration": 3774,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "_serverest_login.default.acessarServeRestCadastro();\n_serverest_cdusuario.default.realizar_cadastroAdmin();\ncy.wait(1500);",
                      "err": {},
                      "uuid": "130acd13-a1ed-4c27-ab72-064402074a02",
                      "parentUUID": "d25a6408-7d9b-440d-94a0-17462be46615",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Deve logar com esse mesmo usuário admin",
                      "fullTitle": "Testes Front ServeRest - CADASTRO DE USUARIOS Testes cadastro de usuário/Positivos Cadastro de usuário com propriedades de administrador Deve logar com esse mesmo usuário admin",
                      "timedOut": null,
                      "duration": 3194,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "_serverest_login.default.acessarServeRest();\n_serverest_cdusuario.default.login();\ncy.wait(1500);",
                      "err": {},
                      "uuid": "6f5cbaaa-f96e-4a18-bd07-d5e66aa60497",
                      "parentUUID": "d25a6408-7d9b-440d-94a0-17462be46615",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Deve validar elementos da página inicial",
                      "fullTitle": "Testes Front ServeRest - CADASTRO DE USUARIOS Testes cadastro de usuário/Positivos Cadastro de usuário com propriedades de administrador Deve validar elementos da página inicial",
                      "timedOut": null,
                      "duration": 1655,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "_serverest_login.default.validarNavBarAdmin();\n_serverest_login.default.validarCorpoAdmin();\ncy.wait(1500);",
                      "err": {},
                      "uuid": "f05282ab-4afb-4f31-b637-60d91f40f182",
                      "parentUUID": "d25a6408-7d9b-440d-94a0-17462be46615",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "130acd13-a1ed-4c27-ab72-064402074a02",
                    "6f5cbaaa-f96e-4a18-bd07-d5e66aa60497",
                    "f05282ab-4afb-4f31-b637-60d91f40f182"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 8623,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "c0f0bff1-3dbc-4bf7-87f7-3fbe1bc452e0",
                  "title": "Cadastro de usuário sem propriedades de administrador",
                  "fullFile": "",
                  "file": "",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Deve cadastrar um usuário não administrador",
                      "fullTitle": "Testes Front ServeRest - CADASTRO DE USUARIOS Testes cadastro de usuário/Positivos Cadastro de usuário sem propriedades de administrador Deve cadastrar um usuário não administrador",
                      "timedOut": null,
                      "duration": 4585,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "_serverest_login.default.acessarServeRestCadastro();\n_serverest_cdusuario.default.realizar_cadastroNaoAdmin();\ncy.wait(1500);",
                      "err": {},
                      "uuid": "13560ff0-d2cf-446a-b75b-06bb91c3636d",
                      "parentUUID": "c0f0bff1-3dbc-4bf7-87f7-3fbe1bc452e0",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Deve logar com esse mesmo usuário",
                      "fullTitle": "Testes Front ServeRest - CADASTRO DE USUARIOS Testes cadastro de usuário/Positivos Cadastro de usuário sem propriedades de administrador Deve logar com esse mesmo usuário",
                      "timedOut": null,
                      "duration": 3456,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "_serverest_login.default.acessarServeRest();\n_serverest_cdusuario.default.loginNaoAdmin();\ncy.wait(1500);",
                      "err": {},
                      "uuid": "c4e045f9-f8a8-495c-86f0-15cf98301d5c",
                      "parentUUID": "c0f0bff1-3dbc-4bf7-87f7-3fbe1bc452e0",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Validar elementos da página inicial",
                      "fullTitle": "Testes Front ServeRest - CADASTRO DE USUARIOS Testes cadastro de usuário/Positivos Cadastro de usuário sem propriedades de administrador Validar elementos da página inicial",
                      "timedOut": null,
                      "duration": 4837,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "_serverest_login.default.validarHomepageNaoAdmin();\n_serverest_login.default.validarDivsProdutos();\n_serverest_login.default.validarValue();",
                      "err": {},
                      "uuid": "7e2377d4-30cc-4a64-82e8-f79c46ee716a",
                      "parentUUID": "c0f0bff1-3dbc-4bf7-87f7-3fbe1bc452e0",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "13560ff0-d2cf-446a-b75b-06bb91c3636d",
                    "c4e045f9-f8a8-495c-86f0-15cf98301d5c",
                    "7e2377d4-30cc-4a64-82e8-f79c46ee716a"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 12878,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [
                "f31722e7-a8e0-4346-aca4-5491558acd1d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2236,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c25627fd-bfdb-463c-80be-8fa02f5dd48d",
              "title": "Testes cadastro de usuário/Negativos",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "28abc8c9-e3e7-4dba-9312-970777512aff",
                  "title": "Testes cadastro de usuário deixando algum campo em branco",
                  "fullFile": "",
                  "file": "",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Deve cadastrar um usuário com o nome em branco",
                      "fullTitle": "Testes Front ServeRest - CADASTRO DE USUARIOS Testes cadastro de usuário/Negativos Testes cadastro de usuário deixando algum campo em branco Deve cadastrar um usuário com o nome em branco",
                      "timedOut": null,
                      "duration": 3316,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "_serverest_login.default.acessarServeRestCadastro();\n_serverest_cdusuario.default.nomeObrigatorio();",
                      "err": {},
                      "uuid": "bf5d83b9-1b2c-43fe-8eb4-5007ff31d122",
                      "parentUUID": "28abc8c9-e3e7-4dba-9312-970777512aff",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Deve cadastrar um usuário com o Email em branco",
                      "fullTitle": "Testes Front ServeRest - CADASTRO DE USUARIOS Testes cadastro de usuário/Negativos Testes cadastro de usuário deixando algum campo em branco Deve cadastrar um usuário com o Email em branco",
                      "timedOut": null,
                      "duration": 1691,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "_serverest_login.default.acessarServeRestCadastro();\n_serverest_cdusuario.default.emailObrigatorio();",
                      "err": {},
                      "uuid": "507ac96f-8a7e-4c2e-8004-c20df504771e",
                      "parentUUID": "28abc8c9-e3e7-4dba-9312-970777512aff",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Deve cadastrar um usuário com a senha em branco",
                      "fullTitle": "Testes Front ServeRest - CADASTRO DE USUARIOS Testes cadastro de usuário/Negativos Testes cadastro de usuário deixando algum campo em branco Deve cadastrar um usuário com a senha em branco",
                      "timedOut": null,
                      "duration": 1787,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "_serverest_login.default.acessarServeRestCadastro();\n_serverest_cdusuario.default.passwordObrigatorio();",
                      "err": {},
                      "uuid": "abd3af23-be02-48b6-969d-bb075bef247b",
                      "parentUUID": "28abc8c9-e3e7-4dba-9312-970777512aff",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "bf5d83b9-1b2c-43fe-8eb4-5007ff31d122",
                    "507ac96f-8a7e-4c2e-8004-c20df504771e",
                    "abd3af23-be02-48b6-969d-bb075bef247b"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 6794,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "beaaf31d-03e2-4abb-90ac-60d9838627c1",
                  "title": "Testes cadastro de usuário com Email inválido",
                  "fullFile": "",
                  "file": "",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Deve cadastrar um usuário com Email inválido",
                      "fullTitle": "Testes Front ServeRest - CADASTRO DE USUARIOS Testes cadastro de usuário/Negativos Testes cadastro de usuário com Email inválido Deve cadastrar um usuário com Email inválido",
                      "timedOut": null,
                      "duration": 2019,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "_serverest_login.default.acessarServeRestCadastro();\n_serverest_cdusuario.default.emailFaltandoDados('testando@qa');",
                      "err": {},
                      "uuid": "dc386826-6427-4fef-93cc-e6c19fae75bf",
                      "parentUUID": "beaaf31d-03e2-4abb-90ac-60d9838627c1",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Deve cadastrar um usuário sem inclua um \"@\" no endereço de e-mail.",
                      "fullTitle": "Testes Front ServeRest - CADASTRO DE USUARIOS Testes cadastro de usuário/Negativos Testes cadastro de usuário com Email inválido Deve cadastrar um usuário sem inclua um \"@\" no endereço de e-mail.",
                      "timedOut": null,
                      "duration": 2297,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "_serverest_login.default.acessarServeRestCadastro();\n_serverest_cdusuario.default.emailFaltandoDados2('joaohotmail.com');\n_serverest_cdusuario.default.validarAlert();",
                      "err": {},
                      "uuid": "ed8195f8-24fe-488c-8d07-8a7b341fd5b6",
                      "parentUUID": "beaaf31d-03e2-4abb-90ac-60d9838627c1",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "dc386826-6427-4fef-93cc-e6c19fae75bf",
                    "ed8195f8-24fe-488c-8d07-8a7b341fd5b6"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 4316,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "794f408c-aff7-4606-ac08-43e89fd44266",
      "title": "",
      "fullFile": "cypress/integration/front_listaDeCompras.spec.js",
      "file": "cypress/integration/front_listaDeCompras.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "910c7a29-cd22-45c1-9c18-54ee616d3037",
          "title": "Testes Front ServeRest - COMPRAS",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "7a73112a-cfc9-4a28-ad40-928732e787b6",
              "title": "Testes de compra positivos",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve realizar uma compra e validar todas as etapas",
                  "fullTitle": "Testes Front ServeRest - COMPRAS Testes de compra positivos Deve realizar uma compra e validar todas as etapas",
                  "timedOut": null,
                  "duration": 14090,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "_serverest_login.default.validarHomepageNaoAdmin();\n_serverest_login.default.validarDivsProdutos();\n_serverest_listaCompras.default.adicionarNaLista();\ncy.wait(1500);\n_serverest_listaCompras.default.validarListaDeCompras();\n_serverest_listaCompras.default.validarProduto();",
                  "err": {},
                  "uuid": "3ef0cb6c-2b59-41d7-b944-1359a47a6690",
                  "parentUUID": "7a73112a-cfc9-4a28-ad40-928732e787b6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3ef0cb6c-2b59-41d7-b944-1359a47a6690"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 14090,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f8511812-f559-456e-9842-d94deed8516d",
              "title": "Compras positivas",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve realizar o caminho completo ate adicionar ao carrinho",
                  "fullTitle": "Testes Front ServeRest - COMPRAS Compras positivas Deve realizar o caminho completo ate adicionar ao carrinho",
                  "timedOut": null,
                  "duration": 10197,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//as proximas 2 linhas podem ser replicadas diversas vezes para adicionar mais produtos\n_serverest_listaCompras.default.adicionarNaLista();\ncy.wait(1000);\n_serverest_listaCompras.default.adicionarNaLista();\ncy.wait(1000);\n_serverest_listaCompras.default.adicionarNaLista();\ncy.wait(1000);\n_serverest_listaCompras.default.mandarParaCarrinho();",
                  "err": {},
                  "uuid": "1addf429-5fb7-472c-8da0-ef67bd5bdd02",
                  "parentUUID": "f8511812-f559-456e-9842-d94deed8516d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve adicionar itens e limpar a lista",
                  "fullTitle": "Testes Front ServeRest - COMPRAS Compras positivas Deve adicionar itens e limpar a lista",
                  "timedOut": null,
                  "duration": 8093,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "_serverest_listaCompras.default.adicionarNaLista();\ncy.wait(1000);\n_serverest_listaCompras.default.adicionarNaLista();\ncy.wait(1000);\n_serverest_listaCompras.default.limparLista();",
                  "err": {},
                  "uuid": "111ee1ae-f232-41f0-b7e5-31806065a0db",
                  "parentUUID": "f8511812-f559-456e-9842-d94deed8516d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1addf429-5fb7-472c-8da0-ef67bd5bdd02",
                "111ee1ae-f232-41f0-b7e5-31806065a0db"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 18290,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "136f528c-2d9c-428c-99e3-3d2ffc5af754",
      "title": "",
      "fullFile": "cypress/integration/front_login.spec.js",
      "file": "cypress/integration/front_login.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "ade0ffae-558a-49f1-8ec2-4faa38aea4a9",
          "title": "Testes Front ServeRest - LOGIN",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "b2af2318-84e0-4170-9c59-e1316026b0dd",
              "title": "Testes de login positivos",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve verificar se os campos para login estão adequados",
                  "fullTitle": "Testes Front ServeRest - LOGIN Testes de login positivos Deve verificar se os campos para login estão adequados",
                  "timedOut": null,
                  "duration": 2947,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "_serverest_login.default.acessarServeRest();\n_serverest_login.default.verificarLogin();",
                  "err": {},
                  "uuid": "3d82cc7a-6b7a-4b6d-a3f3-bde87c18b011",
                  "parentUUID": "b2af2318-84e0-4170-9c59-e1316026b0dd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3d82cc7a-6b7a-4b6d-a3f3-bde87c18b011"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2947,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "733ef8b2-409a-4031-894a-236794a51aa9",
              "title": "Testes de login negativos",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve logar com um usuário que não existe",
                  "fullTitle": "Testes Front ServeRest - LOGIN Testes de login negativos Deve logar com um usuário que não existe",
                  "timedOut": null,
                  "duration": 2132,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "_serverest_login.default.logarUsuárioInexistente('sadjabdba22@qa.com');\n_serverest_login.default.validarLoginInvalido();",
                  "err": {},
                  "uuid": "01986da0-a54a-45d6-8a11-e2d2f49bafe4",
                  "parentUUID": "733ef8b2-409a-4031-894a-236794a51aa9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve logar com um usuário existente mas com a senha errada",
                  "fullTitle": "Testes Front ServeRest - LOGIN Testes de login negativos Deve logar com um usuário existente mas com a senha errada",
                  "timedOut": null,
                  "duration": 1678,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "_serverest_login.default.acessarServeRest();\n_serverest_login.default.logarSenhaErrada('senhaerrada');\n_serverest_login.default.validarLoginInvalido();",
                  "err": {},
                  "uuid": "311e290f-a812-4af3-9661-d8a442ec1204",
                  "parentUUID": "733ef8b2-409a-4031-894a-236794a51aa9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve tentar logar com um usuário com caracteres inválidos",
                  "fullTitle": "Testes Front ServeRest - LOGIN Testes de login negativos Deve tentar logar com um usuário com caracteres inválidos",
                  "timedOut": null,
                  "duration": 1551,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "_serverest_login.default.acessarServeRest();\n_serverest_login.default.logarUsuárioInexistente('asdad123');\n_serverest_login.default.validarAlert();",
                  "err": {},
                  "uuid": "0a093d7b-c03c-4008-9c7d-b315cd500a77",
                  "parentUUID": "733ef8b2-409a-4031-894a-236794a51aa9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "01986da0-a54a-45d6-8a11-e2d2f49bafe4",
                "311e290f-a812-4af3-9661-d8a442ec1204",
                "0a093d7b-c03c-4008-9c7d-b315cd500a77"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5361,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.3.1"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/report/mochawesome-report",
        "overwrite": false,
        "html": false,
        "json": true,
        "timestamp": "yyyymmdd_HHMMss",
        "reportTitle": "Relatório Testes Sprint 5",
        "cdn": true,
        "charts": true
      },
      "version": "5.2.0"
    }
  }
}